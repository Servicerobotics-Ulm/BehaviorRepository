; (execute '(driveToStation 0))
(realize-tcb (driveToStation ?stationId)
	(action (
		(format t "driveToStation ~s ~%" '?stationId)
		
		(let* (
			(station (tcl-kb-query :key '(is-a id) :value '( (is-a station) (id ?stationId))))
			(goal (get-value station 'approach-location))
                     )
                     
                     (format t "goal name ~s ~%" goal)
                     
                     (tcl-push-back-plan :plan 
                    	`(
                     	 	(localizationModInst.tcb-activate-localization)
    			  	(navigation.approachLocation ,goal)
    			  	(localizationModInst.tcb-deactivate-localization)
    			 )	
                     )
               )

	))
)

; (execute '(dockToMPSStation 0 1)) 
; beltId > 0
(realize-tcb (dockToMPSStation ?stationId ?beltId)
	(action (

		(format t "dockToMPSStation: stationId, betlId ~s, ~s ~%" '?stationId '?beltId)
	))
	(plan (

		(MPS.tcb-mps-station-dock ?stationId ?beltId)
	))
)

; (execute '(undockFromMPSStation)) 
(realize-tcb (undockFromMPSStation)
	(action (

		(format t "undockFromMPSStation~%")
	))
	(plan (

		(MPS.tcb-mps-station-undock-mps)
	))
)

; (execute '(unloadTo 0))
(realize-tcb (unloadTo ?stationId)
	(action (

		(format t "unloadTo ~s~%" '?stationId)
	))
	(plan (

		(MPS.tcb-mps-station-unload-belts ?stationId)
	))
)

; (execute '(loadFrom 0))
(realize-tcb (loadFrom ?stationId)
	(action (

		(format t "loadFrom ~s~%" '?stationId)
	))
	(plan (

		(MPS.tcb-mps-station-load ?stationId)
				
	))
)

;;--------------------------------------------------------------------------------------------------------------
;; deliverBoxToStation
;; input<number, number > 0> 
;;---------------------------------------------------------------------------------------------------------------
; (execute '(deliverBoxToStation 0 1)) 
(realize-tcb (deliverBoxToStation ?stationId ?beltId)
	(action (

		(format t "deliverBoxToStation: stationId, betlId ~s, ~s ~%" '?stationId '?beltId)

		(let* (
			  (station (tcl-kb-query :key '(is-a id) :value '( (is-a station) (id ?stationId))))
			  (symbolicLocation (get-value station 'approach-waypoint))
			 )

             (tcl-push-back-plan :plan 
             	`(
    			 	(navPathClient.gotoLocation ,symbolicLocation)
					(dockToMPSStation ?stationId ?beltId)
					(unloadTo ?stationId)
					(undockFromMPSStation)
    			 )	
             )

		)

	))
)
;(tcl-kb-query :key '(is-a id) :value '( (is-a station) (id 0)))
;;--------------------------------------------------------------------------------------------------------------
;; collectBoxFromStation
;; ;; input<number, number > 0>
;;---------------------------------------------------------------------------------------------------------------
; (execute '(collectBoxFromStation 0 1)) 
(realize-tcb (collectBoxFromStation ?stationId ?beltId)
	(action (

		(format t "deliverBoxToStation: stationId, betlId ~s, ~s ~%" '?stationId '?beltId)

		(let* (
			  (station (tcl-kb-query :key '(is-a id) :value '( (is-a station) (id ?stationId))))
			  (symbolicLocation (get-value station 'approach-waypoint))
			 )

             (tcl-push-back-plan :plan 
             	`(
    			 	(navPathClient.gotoLocation ,symbolicLocation)
					(dockToMPSStation ?stationId ?beltId)
					(loadFrom ?stationId)
					(undockFromMPSStation)
    			 )	
             )

		)

	))
)

(define-tcb (tcb-job-deliver-from-to ?jobid ?from-station-id ?from-belt ?to-station-id ?to-belt)
  ;(rules (rule-abort-job-wrapper-error-abort rule-deliver-from-to-mps-station-failed))
  (action (
    (format t "=========================>>> tcb-job-deliver-from-to ~%")))
  (plan ( (tcb-update-robot-state 'BUSY ?jobid)
          (tcb-job-set-lc-state-RUNNING)
          (collectBoxFromStation ?from-station-id ?from-belt)
          (deliverBoxToStation ?to-station-id ?to-belt)
          (tcb-job-set-lc-state-FINISHED)
          (tcb-update-robot-state 'IDLE)
        )
  )
)
