(realize-tcb (tcbSleep)
	(action 
		(
			(sleep 1.0)
		)
	)
)

; ptu must be in state Move!
; camera state Query timinig issue (simulation) => sleep required!
(realize-tcb (detectRack)
	(action 
		(
			(format t "start detectRack ~%")
			(tcl-wiring-connect :clientComp "ComponentOpenRave_Larry" :wiringName "EnvironmentQueryServiceReq" :serverComp "ComponentRackDetection_Larry" :serverService "environmentQueryServer")

			(let ( 
					(env (get-value (tcl-kb-query :key '(is-a) :value `((is-a robot))) 'env))
		)
					(cond 
						((string-equal env "real")
							(tcl-wiring-connect :clientComp "ComponentRackDetection_Larry" :wiringName "kinectQueryClient" :serverComp "ComponentKinectV2Server_Larry" :serverService "imageQueryV2Server")
	)
	
						((string-equal env "sim")
							(tcl-wiring-connect :clientComp "ComponentRackDetection_Larry" :wiringName "kinectQueryClient" :serverComp "ComponentWebots3DCamera_Larry" :serverService "imageQueryServer")						)

						(T 
							(format t "wrong env type! ~%")
)
					)
			)
		)
	)
	
	(plan (
		(manipulationModule.clearOR)
		(ptuModule.moveptu absolute 1.57 -0.55)
		(rackDetectionModule.tcb-set-query-image)
		(tcbSleep)
		;(rackDetectionModule.tcb-set-obj-type R000032)
		(rackDetectionModule.detectRack => ?envId ?objs)
		(rackDetectionModule.storeObjects-rd ?objs)
    	(manipulationModule.loadEnvInOpenRave ?envId)
    	(ptuModule.moveptu absolute 0.0 0.0)
    	(rackDetectionModule.setNeutral)
    ))
)

; ptu must be in state Move!
; camera state Query timinig issue (simulation) => sleep required!
(realize-tcb (detectBoxes)
	(action 
		(
			(format t "start detectBoxes ~%")
			(tcl-wiring-connect :clientComp "ComponentOpenRave_Larry" :wiringName "EnvironmentQueryServiceReq" :serverComp "ComponentKinectBoxDetection_Larry" :serverService "environmentQueryServer")

			
			(let ( 
					(env (get-value (tcl-kb-query :key '(is-a) :value `((is-a robot))) 'env))
		)
				 (cond 
					((string-equal env "real")
						(tcl-wiring-connect :clientComp "ComponentKinectBoxDetection_Larry" :wiringName "kinectQueryClient" :serverComp "ComponentKinectV2Server_Larry" :serverService "imageQueryV2Server")
	)
	
					((string-equal env "sim")
						(tcl-wiring-connect :clientComp "ComponentKinectBoxDetection_Larry" :wiringName "kinectQueryClient" :serverComp "ComponentWebots3DCamera_Larry" :serverService "imageQueryServer")
	      )
					(T 
						(format t "wrong env type! ~%")
	)
)


			)
		)
	)
	
	(plan (
			(manipulationModule.clearOR)
		    (ptuModule.moveptu absolute 1.57 -0.65)
			(rackDetectionModule.tcb-set-query-image)
			(tcbSleep)
			;(boxDetectionModule.setObjType RATIOPHARM-IBU)
			(boxDetectionModule.setObjType WHITE-BOX-RECT)			
			(boxDetectionModule.detectBoxes => ?envId ?objs)
			(boxDetectionModule.storeObjects-bd ?objs)
			(manipulationModule.loadEnvInOpenRave ?envId)
			(ptuModule.moveptu absolute 0.0 0.0)
			(rackDetectionModule.setNeutral)
	      )
	)
)

;(execute '(showObjects))
(define-tcb (showObjects)
  (action (
	  (let ((obj-list     (tcl-kb-query-all :key '(is-a) :value '((is-a object)))))
	    (dolist (obj obj-list)
	      (format t "~%--------------------------------~%")
	      (format t "id                      : ~s ~%" (get-value obj 'id))
	      (format t "  envid                 : ~s ~%" (get-value obj 'envid))
	      (format t "  status                : ~s ~%" (get-value obj 'status))
	      (format t "  stacked-into          : ~s ~%" (get-value obj 'stacked-into))
	      (format t "  capacity              : ~s ~%" (get-value obj 'capacity))
	      (format t "  contains              : ~s ~%" (get-value obj 'contains))
	      (format t "  type                  : ~s ~%" (get-value obj 'type))
	      (format t "  cleanup               : ~s ~%" (get-value obj 'cleanup))
	      (format t "  pose                  : ~s ~%" (get-value obj 'pose))
	      (format t "  fill-level            : ~s ~%" (get-value obj 'fill-level))
	      (format t "  simple-grasping       : ~s ~%" (get-value obj 'simple-grasping))
	      (format t "  current-grasp-offset  : ~s ~%" (get-value obj 'current-grasp-offset))
	      (format t "  stacking-offset       : ~s ~%" (get-value obj 'stacking-offset))
	      (format t "  stack-growing-offset  : ~s ~%" (get-value obj 'stack-growing-offset))
	      (format t "  speech                : ~s ~%" (get-value obj 'speech))
	    )
	  )
	))
)
