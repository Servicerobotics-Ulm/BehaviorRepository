;(execute '(manipulationModule.loadEnvInOpenRave 0))

;(execute '(gotoAnglesOR 'name standby))
;(execute '(gotoAnglesOR 'name drop-to-robot))
;(execute '(gotoAnglesOR 'name picking-left))

#|
(define-tcb (gotoAnglesOR 'name ?name)
  (module "manipulationPlannerModule")
  
  (precondition  (not (equal '() (get-value (tcl-kb-query :key '(is-a name) :value '( (is-a manipulator-pose) (name ?name))) 'angles))))
  (action ((format t "=========================>>> gotoAnglesOR 'name ~s ~%" '?name)
            
           (let* ((gripper-before (get-value (tcl-kb-query :key '(is-a name) :value '( (is-a manipulator-pose) (name ?name))) 'gripper-before))
                  (gripper-after (get-value (tcl-kb-query :key '(is-a name) :value '( (is-a manipulator-pose) (name ?name))) 'gripper-after))
                  (angles (get-value (tcl-kb-query :key '(is-a name) :value '( (is-a manipulator-pose) (name ?name))) 'angles)))
            

             ;; TODO: test without
             ;(cond
             ;  ((not (null gripper-after))
             ;   (tcl-push-plan :plan `((tcb-gripper ,gripper-after)))))
               
             (tcl-push-plan :plan `((manipulationModule.gotoAnglesOR ,angles)))
               
             ;(cond
             ;  ((not (null gripper-before))
             ;   (tcl-push-plan :plan `((tcb-gripper ,gripper-before)))))
               
            '(SUCCESS ())
          ) 
  ))
)
|#

;(execute '(gotoAnglesURN standby))
;(execute '(gotoAnglesURN picking-left))
;(execute '(gotoAnglesURN drop-to-robot))
(define-tcb (gotoAnglesURN ?name)
  (precondition  (not (equal '() (get-value (tcl-kb-query :key '(is-a name) :value '( (is-a manipulator-pose) (name ?name))) 'angles))))
  (action (

      (format t "=========================>>> gotoAnglesURN ~s ~%" '?name)
            
           (let* (
                  (angles (get-value (tcl-kb-query :key '(is-a name) :value '( (is-a manipulator-pose) (name ?name))) 'angles))
                  (joint-time (get-value (tcl-kb-query :key '(is-a name) :value '( (is-a manipulator-pose) (name ?name))) 'joint-time)))
            
           (cond
             ((not (null joint-time))
               (format t "Joint time!~%")
               (tcl-push-plan :plan `((manipulationModule.gotoAnglesUR ,angles ,joint-time))))
             (T
               (format t "No joint time!~%")
               (tcl-push-plan :plan `((manipulationModule.gotoAnglesUR ,angles)))))
             
            '(SUCCESS ()))      
)))

;(execute '(mGotoPre 0 RATIOPHARM-IBU))
;(execute '(mGotoPre 0 CHOCO))
(define-tcb (mGotoPre ?envID ?objType)
  (action (
            (format t "=========================>>> mGotoPre:~%")
	    (let* ( (obj-list (tcl-kb-query-all :key '(is-a envid type status) 
                                                :value '((is-a object)(envid ?envID)(type ?objType)(status GRASPABLE))))
                    (count-graspable (length obj-list)))
            (cond
                ((> count-graspable 0)
		  (let ((obj (first (last obj-list))))

                  (format t "obj: ~a~%" obj)
                  (format t " id : ~s ~%"  (get-value obj 'id))
                  (format t " type : ~s ~%"  (get-value obj 'type))

		    ;(tcl-kb-update :key '(is-a id) 
		    ;              :value `(
		    ;                        (is-a OBJECT)
		    ;                        (id ,(get-value obj 'id))
		    ;                        (status TO_BE_GRASPED)))

		 (let* ( 
			(obj-class (tcl-kb-query :key '(is-a type ) 
                                            	 :value `((is-a object-class)(type ,(get-value obj 'type)))))
			(rack (tcl-kb-query :key '(is-a id ) 
                                            :value `((is-a rack)(id ,(get-value obj-class 'rack-id))))))

		  (format t "rack id: ~a~%" (get-value rack 'id))
                  (format t " type: ~s ~%"  (get-value rack 'type))
                  (format t " pre-grasp-pose: ~s ~%"  (get-value rack 'pre-grasp-pose))

                 (cond 
                  ((get-value rack 'pre-grasp-pose) 

                    (setf pre-gripping-pose (append (transformPoseToPoint (nth 7 (get-value obj 'pose)) (nth 8 (get-value obj 'pose)) (nth 9 (get-value obj 'pose))
                                                                          (nth 10 (get-value obj 'pose)) (nth 11 (get-value obj 'pose)) (nth 12 (get-value obj 'pose))
                                                                          (first (get-value rack 'pre-grasp-pose)) (third (get-value rack 'pre-grasp-pose)) (second (get-value rack 'pre-grasp-pose)))
                                                   `( ,(nth 10 (get-value obj 'pose)) ,(nth 11 (get-value obj 'pose)) ,(nth 12 (get-value obj 'pose)) )))
                    (format t "obj pose: ~s ~%" (get-value obj 'pose))
                    (format t "pre gripping pose: ~s ~%" pre-gripping-pose)

                    (tcl-push-plan :plan `(

                      ;(tcb-manipulator-pose-tcp ,pre-gripping-pose)
                      (manipulationModule.gotoTCPOR ,pre-gripping-pose)
                      
                      ;(tcb-delete-obj-from-openrave ,(get-value obj 'id))
                      ;;;(manipulationModule.delete ,(get-value obj 'id))

                    )))
                  (T 
		    (format t "no pre gripping pose defined~%")))
        )

            '(SUCCESS ())))
          (T 
	    '(ERROR (NO GRASPABLE OBJECTS))))))))

;(execute '(mGotoPreUp 0 CHOCO))
(define-tcb (mGotoPreUp ?envID ?objType)
  (action (
            (format t "=========================>>> mGotoPreUp:~%")
	    (let* ( (obj-list (tcl-kb-query-all :key '(is-a envid type status) 
                                                :value '((is-a object)(envid ?envID)(type ?objType)(status GRASPABLE))))
                    (count-graspable (length obj-list)))
            (cond
                ((> count-graspable 0)
		  (let ((obj (first (last obj-list))))

                  (format t "obj: ~a~%" obj)
                  (format t " id : ~s ~%"  (get-value obj 'id))
                  (format t " type : ~s ~%"  (get-value obj 'type))

		    (tcl-kb-update :key '(is-a id) 
		                  :value `(
		                            (is-a OBJECT)
		                            (id ,(get-value obj 'id))
		                            (status TO_BE_GRASPED)))

		 (let* ( 
			(obj-class (tcl-kb-query :key '(is-a type ) 
                                            	 :value `((is-a object-class)(type ,(get-value obj 'type)))))
			(rack (tcl-kb-query :key '(is-a id ) 
                                            :value `((is-a rack)(id ,(get-value obj-class 'rack-id))))))

		  (format t "rack id: ~a~%" (get-value rack 'id))
                  (format t " type: ~s ~%"  (get-value rack 'type))
                  (format t " pre-grasp-pose: ~s ~%"  (get-value rack 'pre-grasp-pose))

                 (cond 
                  ((get-value rack 'pre-grasp-pose) 

                    (setf pre-gripping-pose (append (transformPoseToPoint (nth 7 (get-value obj 'pose)) (nth 8 (get-value obj 'pose)) (nth 9 (get-value obj 'pose))
                                                                          (nth 10 (get-value obj 'pose)) (nth 11 (get-value obj 'pose)) (nth 12 (get-value obj 'pose))
                                                                          (first (get-value rack 'pre-grasp-pose)) (third (get-value rack 'pre-grasp-pose)) (second (get-value rack 'pre-grasp-pose)))
                                                   `( ,(nth 10 (get-value obj 'pose)) ,(nth 11 (get-value obj 'pose)) ,(nth 12 (get-value obj 'pose)) )))
                    (format t "obj pose: ~s ~%" (get-value obj 'pose))
                    (format t "pre gripping pose: ~s ~%" pre-gripping-pose)

                    (tcl-push-plan :plan `(

                      ;(tcb-manipulator-pose-tcp ,pre-gripping-pose)
                      (manipulationModule.gotoTCPOR ,pre-gripping-pose)
                      (manipulationModule.gotoTCPORRel ,(get-value rack 'pull-out-pose))

                      
                      ;(tcb-delete-obj-from-openrave ,(get-value obj 'id))
                      ;;;(manipulationModule.delete ,(get-value obj 'id))

                    )))
                  (T 
		    (format t "no pre gripping pose defined~%")))
        )

            '(SUCCESS ())))
          (T 
	    '(ERROR (NO GRASPABLE OBJECTS))))))))

;; TTODO: handler should not be necessary?
(define-tcb (gotoTCPURRelI ?obj-id)
  (module "manipulationPlannerModule")
  (action (
           (format t "=========================>>> tcb-grasp-object real-direct ~%")
           (format t "obj-id ~a ~%" '?obj-id)
           (let* ((obj (tcl-kb-query :key '(is-a id) :value '((is-a object)(id ?obj-id))))
                  (obj-class (tcl-kb-query :key '(is-a type) 
                                           :value `((is-a object-class)(type ,(get-value obj 'type)))))
                  (rack (tcl-kb-query :key '(is-a id ) 
                                      :value `((is-a rack)(id ,(get-value obj-class 'rack-id)))))
                  (relative-pre-grasp-pose (get-value rack 'pre-grasp-pose))

                  (relative-grasp-pose (list (* (first relative-pre-grasp-pose ) -1)  (* (second relative-pre-grasp-pose ) -1)  (* (third relative-pre-grasp-pose ) -1)  0 0 0 )))

                  (print "Direct relative-grasp-pose: ")
                  (print relative-grasp-pose)

                  ; (tcl-activate-event :name 'evt-traj 
                  ;                 :handler 'handler-grasping 
                  ;                 :server 'cs_trajExecution 
                  ;                 :service 'manipulatorevent 
                  ;                 :mode 'continuous)


                  (tcl-push-plan :plan `(
                   (manipulationModule.open) 
                   (manipulationModule.gotoTCPURRel ,relative-grasp-pose)
                   (manipulationModule.close)
                  ))
            )
    ))
)

; (execute '(manipulationModule.gotoTCPORN tcp1))
; (execute '(gotoTCP 'name tcp-one))
(define-tcb (gotoTCP 'name ?name)
  (precondition  (not (equal '() (get-value (tcl-kb-query :key '(is-a name) :value '( (is-a tcp) (name ?name))) 'pose))))
  (action ((format t "=========================>>> gotoTCPOR 'name ~s ~%" '?name)
            
           (let* (
                  (tcp (get-value (tcl-kb-query :key '(is-a name) :value '( (is-a tcp) (name ?name))) 'pose))
                 )
           	 (format t "=========================>>> tcp ~s ~%" tcp)
             (tcl-push-plan :plan `((manipulationModule.gotoTCPOR ,tcp)))
               
            '(SUCCESS ())
          ) 
  ))
)


(define-tcb (pickAndPlace ?envID ?objType => ?graspedObjectId)
  (rules (gotoTCPOR_NoIk gotoAnglesOR_NoPath gotoTCPOR_NoPath))
  (action (
        (format t "=========================>>> mGotoPre:~%")
	    (let* ( (obj-list (tcl-kb-query-all :key '(is-a envid type status) :value '((is-a object)(envid ?envID)(type ?objType)(status GRASPABLE))))
                (count-graspable (length obj-list)))
            (format t "count-graspable ~s ~%" count-graspable)    
            (cond
                ((> count-graspable 0)
				  	(let ((obj (first (last obj-list))))

		                (format t "obj: ~a~%" obj)
		                (format t " id : ~s ~%"  (get-value obj 'id))
		                (format t " type : ~s ~%"  (get-value obj 'type))

				    	;(tcl-kb-update :key '(is-a id) 
				        ;          :value `(
				        ;                    (is-a OBJECT)
				        ;                    (id ,(get-value obj 'id))
				        ;                    (status TO_BE_GRASPED)
				        ;                   )
				        ;)

					    (tcl-bind-var :name '?graspedObjectId :value (get-value obj 'id))

					 	(let* ( 
							(env (get-value (tcl-kb-query :key '(is-a) :value `((is-a robot))) 'env))
							(obj-class (tcl-kb-query :key '(is-a type ) :value `((is-a object-class)(type ,(get-value obj 'type)))))
							(rack (tcl-kb-query :key '(is-a id ) :value `((is-a rack)(id ,(get-value obj-class 'rack-id))))))

						  		(format t "rack id: ~a~%" (get-value rack 'id))
				                (format t " type: ~s ~%"  (get-value rack 'type))
				                (format t " pre-grasp-pose (rack): ~s ~%"  (get-value rack 'pre-grasp-pose))

				                (cond 
				                  ((get-value rack 'pre-grasp-pose) 

				                    (setf pre-grasp-pose (append (transformPoseToPoint (nth 7 (get-value obj 'pose)) (nth 8 (get-value obj 'pose)) (nth 9 (get-value obj 'pose))
				                                                                          (nth 10 (get-value obj 'pose)) (nth 11 (get-value obj 'pose)) (nth 12 (get-value obj 'pose))
				                                                                          (first (get-value rack 'pre-grasp-pose)) (third (get-value rack 'pre-grasp-pose)) (second (get-value rack 'pre-grasp-pose)))
				                                                   `( ,(nth 10 (get-value obj 'pose)) ,(nth 11 (get-value obj 'pose)) ,(nth 12 (get-value obj 'pose)) )))
				                    (format t "obj pose: ~s ~%" (get-value obj 'pose))
				                    (format t "pre-grasp pose (final): ~s ~%" pre-grasp-pose)

				                    (cond
				                    	((string-equal env "real")

					                      (tcl-push-plan :plan `(
						                      (manipulationModule.gotoTCPOR ,pre-grasp-pose)
                                              (manipulationModule.gotoTCPUR 'relative-obj ,(get-value obj 'id))
						                      
						                      (manipulationModule.grasp ,(get-value obj 'id))						        

											  (manipulationModule.gotoTCPUR 'relative-pose ,(get-value rack 'pull-out-pose))

											  (manipulationModule.gotoAnglesOR 'name drop-to-robot)
											  (manipulationModule.open)
											  (manipulationModule.release ?graspedObjectId)
											  (manipulationModule.delete ?graspedObjectId)
					                    	)
					                      )
										)

				                    	((string-equal env "sim")
				                      (tcl-push-plan :plan `(
					                      (manipulationModule.gotoTCPOR ,pre-grasp-pose)
					                      (manipulationModule.grasp ,(get-value obj 'id))
					                      (manipulationModule.close)
										  (manipulationModule.gotoAnglesOR 'name drop-to-robot)
										  (manipulationModule.open)
										  (manipulationModule.release ?graspedObjectId)
											  (manipulationModule.delete ?graspedObjectId)
											  
					                    	)
					                      )
										)

										(T 
						    				(format t "wrong env type!~%")
				                    	)
				                      )
				                   )

				                  (T 
						    		(format t "no pre-grasp pose defined~%")
						    	  )
				                )
				        )

				        (tcl-kb-update :key '(is-a id) 
				        			   :value `(
				                            (is-a OBJECT)
				                            (id ,(get-value obj 'id))
				                            (status GRASPED)
				                        )
				        )
			        	'(SUCCESS ())
		        	)
		  		)
          		(T 
             		(format t "ERROR ~%")   
	    			'(ERROR (NO GRASPABLE OBJECTS))
	    		)
          	)
        )
    ))
)

(define-rule (pickAndPlace_NoIk)
  (tcb (pickAndPlace ?envID ?objType => ?graspedObjectId))
  (return-value (ERROR (NO IK)))
  (action (
            (format t "=========================>>> RULE: (ERROR (NO IK)) pickAndPlace~%")
            (format t "=========================>>> envID: ~s ~%" '?envID)
            (format t "=========================>>> objType: ~s ~%" '?objType)
            (format t "=========================>>> graspedObjectId: ~s ~%" '?graspedObjectId)
            ;(tcl-delete-plan)

	      	(format t "Enter new type (rack/box) or abort: ~%")
	      	(setf selected-type (read-from-string(string-upcase (read-line nil))))

	      (cond 
	      	((string-equal selected-type "box")
	      		
             	 (tcl-push-plan :plan `(
						(detectBoxes)
						(showObjects)
						(pickAndPlace 0 WHITE-BOX-RECT => ?graspedObjectId)	 
                    )
                 )
	      	)
	      	((string-equal selected-type "rack") 
	      		
     	      	 (tcl-push-plan :plan `(
						(detectRack)
						(showObjects)
						(pickAndPlace 0 WHITE-BOX-CUBE => ?graspedObjectId)	 
                    )
                 )
	      	)
	      	(T 
	      		(format t "abort ~%")
	      	)
	      )
	      (tcl-push-plan :plan `(
				(manipulationModule.release ?graspedObjectId)
				(manipulationModule.open)
				(manipulationModule.gotoAnglesOR 'name standby)
          ))
	      
            '(ERROR (NO PATH))
          )
  )
)

(define-rule (pickAndPlace_NoPath)
  (tcb (pickAndPlace ?envID ?objType => ?graspedObjectId))
  (return-value (ERROR (NO PATH)))
  (action (
            (format t "=========================>>> RULE: (ERROR (NO PATH)) pickAndPlace ~s ~%" '?graspedObjectId)
            (format t "=========================>>> envID: ~s ~%" '?envID)
            (format t "=========================>>> objType: ~s ~%" '?objType)
            (format t "=========================>>> graspedObjectId: ~s ~%" '?graspedObjectId)
            ;(tcl-delete-plan)

	      (format t "Enter new type (rack/box) or abort: ~%")
	      (setf selected-type (read-from-string(string-upcase (read-line nil))))
	      (cond 
	      	((string-equal selected-type "box")
	      		
             	 (tcl-push-plan :plan `(
						(detectBoxes)
						(showObjects)
						(pickAndPlace 0 WHITE-BOX-RECT => ?graspedObjectId)	 
                    )
                 )
	      	)
	      	((string-equal selected-type "rack")
	      		
     	      	 (tcl-push-plan :plan `(
						(detectRack)
						(showObjects)
						(pickAndPlace 0 WHITE-BOX-CUBE => ?graspedObjectId)	 
                    )
                 )
	      	)
	      	(T 
	      		(format t "abort ~%")
	      	)
	      )

	      (tcl-push-plan :plan `(
				(manipulationModule.release ?graspedObjectId)
				(manipulationModule.open)
				(manipulationModule.gotoAnglesOR 'name standby)
          ))

            '(ERROR (NO PATH))
          )
  )
)
