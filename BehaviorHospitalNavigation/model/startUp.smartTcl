(format t "INIT DONE ~%")

(defun format-rooms (s obj colonmod at-sign) (declare (ignore colonmod)) (declare (ignore at-sign)) (format s "~s" (get-value obj 'name)))
(defun format-locations (s obj colonmod at-sign) (declare (ignore colonmod)) (declare (ignore at-sign)) (format s "~s" (get-value obj 'name)))

;; MENU
(defvar nmbr nil)

(defun menu()
  (execute '(navigation.initNavigation))
  (execute '(navigation.loadNavigationMap "navigation-map"))
  (execute '(localizationModInst.localizationSetRobotPose 0 0 0))
  
(loop

  (let ((known-rooms (tcl-kb-query-all :key '(is-a) :value '((is-a room))))
  (known-locations (tcl-kb-query-all :key '(is-a) :value '((is-a location)))))
  (format t "~%MENU~%====~%~%")
  (format t " ---------------------------------------------------- ~%") 
  (format t " ---------------------------------------------------- ~%")
  (format t " 1 - Approach Room~%")
  (format t " 2 - Approach Location~%")
  (format t " 3 - Show Rooms ~%")
  (format t " 4 - Show Locations ~%")
  (format t "99 - quit menu ~%")
  (format t " 0 - exit ~%")
  (format t " ---------------------------------------------------- ~%")
  (format t " ---------------------------------------------------- ~%")
  (setf nmbr (parse-integer (read-line nil)))
  (format t "your choice: ~d ~%" nmbr)  
  (cond        
    ((equal nmbr 1)
     (format t "Approach Room - known Rooms: ~%")
     (format t "~%~{~/format-rooms/~^, ~}~%~%" known-rooms)
     (format t "Enter room name: ~%")
     (setf room-var (string-upcase (read-line nil)))
     (setf room-var (intern room-var))
     (format t "your choice: ~a ~%" (type-of room-var))     
     (execute '(localizationModInst.tcb-activate-localization))
     (execute `(navigation.approachRoom ,room-var))     
     (execute '(localizationModInst.tcb-deactivate-localization)))
    ((equal nmbr 2)
     (format t "Approach location - known locations: ~%")
     (format t "~%~{~/format-locations/~^, ~}~%~%" known-locations)
     (format t "Enter location name: ~%")
     (setf locations-var (string-upcase (read-line nil)))
     (setf locations-var (intern locations-var))
     (format t "your choice: ~a ~%" locations-var)
       (execute '(localizationModInst.tcb-activate-localization))
       (execute `(navigation.approachLocation,locations-var))
       (execute '(localizationModInst.tcb-deactivate-localization)))
    ((equal nmbr 3)
     (show-rooms))
    ((equal nmbr 4)
     (show-locations))
    ((equal nmbr 99)
      (format t "type (menu) to come back to menu ~%")
      (return))
    ((equal nmbr 0)
      (format t "bye bye ~%")
      (quit))))))
      

(menu)
