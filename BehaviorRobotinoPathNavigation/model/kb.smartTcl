(defun show-locations ()
  (let ((obj-list     (tcl-kb-query-all :key '(is-a) :value '((is-a location)))))
    (dolist (obj obj-list)
      (format t "~%--------------------------------~%")
      (format t "L O C A T I O N ------------------~%")
      (format t "name                       : ~s ~%" (get-value obj 'name))
      (format t "  type                     : ~s ~%" (get-value obj 'type))
      (format t "  approach-type            : ~s ~%" (get-value obj 'approach-type))
      (format t "  approach-region-pose     : ~s ~%" (get-value obj 'approach-region-pose))
      (format t "  approach-region-dist     : ~s ~%" (get-value obj 'approach-region-dist))
      (format t "  approach-exact-pose      : ~s ~%" (get-value obj 'approach-exact-pose))
      (format t "  approach-exact-dist      : ~s ~%" (get-value obj 'approach-exact-dist))
      (format t "  approach-exact-safetycl  : ~s ~%" (get-value obj 'approach-exact-safetycl))
      (format t "  orientation-region       : ~s ~%" (get-value obj 'orientation-region))
      (format t "  orientation-exact        : ~s ~%" (get-value obj 'orientation-exact))
      (format t "  orientation              : ~s ~%" (get-value obj 'orientation))
      (format t "  station-distance         : ~s ~%" (get-value obj 'station-distance))
      (format t "  belt-count               : ~s ~%" (get-value obj 'belt-count)))))

(tcl-kb-update 
  :key '(is-a name) 
  :value `(
            (is-a robot)
            (name 1)
            (velocity-travelling ((0 500)(-60 60)))
            (velocity-path-navigation ((0 500)(-60 60)))
            (velocity-following  ((0 1200)(-200 200)))
            ;(nav-type "path") ; "free" or "path"
            (person-tracking-type RGBD)
            (person-tracking-dist 1500)
            ;(current-room room-1)
            ;(current-room warehouse)
            (current-room room-1)
            ;(current-symbolic-position 0)
            (goalid 0)
            (robotip "10.36.32.121")
            (state "INIT")
            (default-nav-map "navigation-map")
            (default-map "localization-map")
            ;(default-nav-map "navigation-map-warehouse")
            ;(default-map "localization-map-warehouse")
            ;(default-nav-map "navigation-map-werk150-sim")
            ;(default-map "localization-map-werk150-sim")
		  )  
)

(tcl-kb-update 
  :key '(is-a name) 
  :value '(
            (is-a room)
            (name room-1)
            (speech "room 1")
            (size (20000 20000))
            (offset (-10000 -10000))))

;; TODO: Correct values needs to be found!
(tcl-kb-update 
  :key '(is-a name) 
  :value '(
            (is-a room)
            (name warehouse)
            (size (20000 20000))
            (offset (-10000 -10000))))

(tcl-kb-update 
  :key '(is-a name) 
  :value '(
            (is-a room)
            (name werk150)
            (size (60000 30000))
            (offset (-40000 -5000))))

(tcl-kb-update 
  :key '(is-a name) 
  :value '( 
            (is-a location)
            (name home)
            (speech "home location")
            (approach-type (region))
            (approach-region-pose (0 0 0))
            (approach-region-dist 150)
            (approach-exact-pose (0 0 0))
            (approach-exact-dist 50)
            (approach-exact-safetycl 0)
            (orientation-region (angle-absolute 0))
            (orientation-exact (angle-absolute 0))
            (backward-dist 500)))
            
(tcl-kb-update 
  :key '(is-a name) 
  :value '( 
            (is-a location)
            (name rack1)
            (speech "rack location")
            (approach-type (region))
            (approach-region-pose (-1400 -1300 0))
            (approach-region-dist 150)
            (approach-exact-pose (-1400 -1300 0))
            (approach-exact-dist 50)
            (approach-exact-safetycl 0)
            (orientation-region (angle-absolute 180))
            (orientation-exact (angle-absolute 180))
            (backward-dist 500)))

(tcl-kb-update 
  :key '(is-a name) 
  :value '( 
            (is-a location)
            (name rack2)
            (speech "rack location")
            (approach-type (region))
            (approach-region-pose (200 -1300 0))
            (approach-region-dist 150)
            (approach-exact-pose (200 -1300 0))
            (approach-exact-dist 50)
            (approach-exact-safetycl 0)
            (orientation-region (angle-absolute 180))
            (orientation-exact (angle-absolute 180))
            (backward-dist 500)))


(tcl-kb-update 
  :key '(is-a name) 
  :value '( 
            (is-a location)
            (name test)
            (speech "test location")
            (approach-type (region))
            (approach-region-pose (0 -7000 0))
            (approach-region-dist 150)
            (approach-exact-pose (0 -7000 0))
            (approach-exact-dist 50)
            (approach-exact-safetycl 0)
            (orientation-region (angle-absolute 180))
            (orientation-exact (angle-absolute 180))
            (backward-dist 500)))

(tcl-kb-update 
  :key '(is-a name) 
  :value '(
            (is-a station-type)
            (name MPS)          
            (docking-type LASER-IR)
           )
)

(tcl-kb-update 
  :key '(is-a name) 
  :value '(
            (is-a station-type)
            (name MANUAL)          
            (docking-type LASER-IR)
           )
)
