(format t "INIT DONE ~%")

(defun format-locations (s obj colonmod at-sign) (declare (ignore colonmod)) (declare (ignore at-sign)) (format s "~s" (get-value obj 'name)))

;; MENU
(defvar nmbr nil)
(defvar locations-var nil)


(defun menu()
  (format t "robot 1: navigation_1.initNavigation, navigation_1.loadNavigationMap navigation-map~%")
  (execute '(navigation_1.initNavigation))
  (execute '(navigation_1.loadNavigationMap "navigation-map"))
  (format t "robot 2: navigation_2.initNavigation, navigation_2.loadNavigationMap navigation-map~%")
  (execute '(navigation_2.initNavigation))
  (execute '(navigation_2.loadNavigationMap "navigation-map"))
;; turn on SmartAmcl (change state to active)
  (execute '(localizationModInst_1.tcb-activate-localization))
  (execute '(localizationModInst_2.tcb-activate-localization))
;; use system parameters SmartAmcl/general/initial_* to set initial pose of robot (or webots editor)
;; (side effect of localizationSetRobotPose: change state of SmartAmcl to active)
;; (execute '(localizationModInst1.localizationSetRobotPose 0 0 0))
  
(loop

  (format t "~%MENU~%====~%~%")
  (format t " ---------------------------------------------------- ~%")
  (format t "  1 - Approach location by Robot 1~%")
  (format t "  2 - Approach location by Robot 2~%")
  (format t " ---------------------------------------------------- ~%")
  (format t "  3 - Show locations ~%")
  (format t " 99 - quit menu ~%")
  (format t "  0 - exit ~%")
  (setf nmbr (parse-integer (read-line nil)))
  (format t "your choice: ~d ~%" nmbr)

  (let ((known-locations (tcl-kb-query-all :key '(is-a) :value '((is-a location)))))
  
  (cond
    ((equal nmbr 1)
     (format t "Approach location - known locations: ~%")
     (format t "~%~{~/format-locations/~^, ~}~%~%" known-locations)
     (format t "Enter location name: ~%")
     (setf locations-var (string-upcase (read-line nil)))
     (setf locations-var (read-from-string locations-var))
     (format t "your choice: ~a ~%" locations-var)
       (execute `(navigation_1.approachLocation,locations-var))
     )
    ((equal nmbr 2)
     (format t "Approach location - known locations: ~%")
     (format t "~%~{~/format-locations/~^, ~}~%~%" known-locations)
     (format t "Enter location name: ~%")
     (setf locations-var (string-upcase (read-line nil)))
     (setf locations-var (read-from-string locations-var))
     (format t "your choice: ~a ~%" locations-var)
       (execute `(navigation_2.approachLocation,locations-var))
     )
    ((equal nmbr 3)
     (show-locations))
    ((equal nmbr 99)
      (format t "type (menu) to come back to menu ~%")
      (return))
    ((equal nmbr 0)
      (format t "bye bye ~%")
      (quit))))))

;;(menu)


;;  from BehaviorRobotinoBoxTransportationTasks

(defun print_stations()
	    (format t " 1 - OPC UA production station with conveyor belt opc.tcp://10.36.32.189:4840 Festo CPX-E-CEC-C1-PN~%")
	    (format t " 2 - OPC UA production station with conveyor belt opc.tcp://10.36.32.190:4840 raspberry pi pixtend ~%")
	    (format t " 4 - Passive station with roller conveyor~%"))


(defun menu2()
;  (execute '(tcbStartup))  
(loop

  (format t "~%MENU~%====~%~%")
  (format t " ---------------------------------------------------- ~%")  
  (format t " Transportation Tasks ~%")
  (format t " ---------------------------------------------------- ~%")
  (format t " -1 - init as robot 1~%")
  (format t " -2 - init as robot 2~%")
  (format t " -3 - Approach location by Robot 1~%")
    
  (format t " 1 - Deliver box to station ~%")
  (format t " 2 - Collect box from station ~%")
  (format t " 3 - Drive to station ~%")
  (format t " 4 - Dock to station ~%")
  (format t " 5 - Undock from station ~%")
  (format t " 6 - Unload box to station ~%")
  (format t " 7 - Load box from station ~%")
  (format t " 8 - Demo loop ~%")
  (format t " 0 - exit ~%")
  (format t "Input: ~%")   
  (setf nmbr (parse-integer (read-line nil)))
  
  (let ((known-locations (tcl-kb-query-all :key '(is-a) :value '((is-a location)))))
    
  (cond
    ((equal nmbr -1)
      (format t "robot 1: navigation_1.initNavigation, navigation_1.loadNavigationMap navigation-map~%")
      (execute '(navigation_1.initNavigation))
      (execute '(navigation_1.loadNavigationMap "navigation-map"))
      ;; turn on SmartAmcl (change state to active)
      ;; SmartAmcl must be active to enable Webots Editor to change position of robot
      (execute '(localizationModInst_1.tcb-activate-localization))
      ;; see /SmartFestoMPSDocking/model/SmartFestoMPSDocking.smartTcl    
      ;;(execute '(ir_1.activateIRServerFetchAditional))    
    )
    ((equal nmbr -2)
      (format t "robot 2: navigation_2.initNavigation, navigation_2.loadNavigationMap navigation-map~%")
      (execute '(navigation_2.initNavigation))
      (execute '(navigation_2.loadNavigationMap "navigation-map"))
      (execute '(localizationModInst_2.tcb-activate-localization))
      ;;(execute '(ir_2.activateIRServerFetchAditional))
    )
    ((equal nmbr -3)
     (format t "Approach location - known locations: ~%")
     (format t "~%~{~/format-locations/~^, ~}~%~%" known-locations)
     (format t "Enter location name: ~%")
     (setf locations-var (string-upcase (read-line nil)))
     (setf locations-var (read-from-string locations-var))
     (format t "your choice: ~a ~%" locations-var)
       (execute `(navigation_2.approachLocation,locations-var))
     )  
    ((equal nmbr 1)
	    (print_stations)
	    (format t "Enter stations id: ~%")
	    (setf stationId (parse-integer(string-upcase (read-line nil))))
	    (setf beltId 1)
	    (format t "your choice stationId: ~a  : beltId = ~a~%" stationId beltId)  
	    (execute `(deliverBoxToStation ,stationid ,beltId))
    )
    ((equal nmbr 2)
    	    (print_stations)
    	    (format t "Enter stations id: ~%")
	    (setf stationId (parse-integer(string-upcase (read-line nil))))
	    (setf beltId 1)
	    (format t "your choice stationId: ~a  : beltId = ~a~%" stationId beltId)  
	    (execute `(collectBoxFromStation ,stationid ,beltId))
    )
    ((equal nmbr 3)
            (print_stations)
   	    (format t "Enter stations id: ~%")
	    (setf stationId (parse-integer(string-upcase (read-line nil))))
	    (format t "your choice stationId: ~a ~%" stationId)  
	    (execute `(driveToStation ,stationid))
    )
    ((equal nmbr 4)
	    (print_stations)
   	    (format t "Enter stations id: ~%")
	    (setf stationId (parse-integer(string-upcase (read-line nil))))
	    (setf beltId 1)
	    (format t "your choice stationId: ~a  : beltId = ~a~%" stationId beltId)  
	    (execute `(dockToMPSStation ,stationid ,beltId))
    )
    ((equal nmbr 5)
	    (execute `(undockFromMPSStation))
    )
    ((equal nmbr 6)
	    (print_stations)
   	    (format t "Enter stations id: ~%")
	    (setf stationId (parse-integer(string-upcase (read-line nil))))
	    (format t "your choice stationId: ~a ~%" stationId)  
	    (execute `(unloadTo ,stationid))
    )
    ((equal nmbr 7)
    	    (print_stations)
    	    (format t "Enter stations id: ~%")
	    (setf stationId (parse-integer(string-upcase (read-line nil))))
	    (format t "your choice stationId: ~a ~%" stationId)  
	    (execute `(loadFrom ,stationid))
    )    
    ((equal nmbr 8)
	    (setf stationId 0)
	    (setf beltId 1)
	    (format t "Demo loop started ~%")
	    (loop
	      (format t "deliverBoxToStation ~a ~%" stationId)
     	  (execute `(deliverBoxToStation ,stationid ,beltId))
	      (setq stationid (mod (1+ stationid) 3))
	      (format t "collectBoxFromStation ~a ~%" stationId)
       	  (execute `(collectBoxFromStation ,stationid ,beltId))
	      (setq stationid (mod (1+ stationid) 3))
	    )
    )
    ((equal nmbr 0)
      (format t "bye bye ~%")
      (break)
      (quit))
      )
   ))
)

(menu2)

(format t "INIT DONE ~%")

