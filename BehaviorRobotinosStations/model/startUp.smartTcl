(format t "INIT DONE ~%")

(defvar nmbr nil)
(defvar locations-var nil)

(defun format-locations (s obj colonmod at-sign) (declare (ignore colonmod)) (declare (ignore at-sign)) (format s "~s" (get-value obj 'name)))

(defun print_stations()
	    (format t " 1 - OPC UA production station with conveyor belt opc.tcp://10.36.32.189:4840 Festo CPX-E-CEC-C1-PN~%")
	    (format t " 2 - OPC UA production station with conveyor belt opc.tcp://10.36.32.190:4840 raspberry pi pixtend ~%")
	    (format t " 4 - Passive station with roller conveyor~%"))

(defun menu()
(loop
  (format t "~%MENU~%====~%~%")
  (format t " ----------------------------------------------------~%")  
  (format t " Transportation Tasks robot ~a~%" id-robot)
  (format t " ----------------------------------------------------~%")
  (format t " 1 - Approach location~%")    
  (format t " 2 - Deliver box to station~%")
  (format t " 3 - Collect box from station~%")
  (format t " 4 - Drive to station~%")
  (format t " 5 - Dock to station~%")
  (format t " 6 - Undock from station~%")
  (format t " 7 - Unload box to station~%")
  (format t " 8 - Load box from station~%")
  (format t " 9 - Demo loop (Note: if you start this in only one ComponentTCLSequencer, it will wait for the other to start too)~%")
  (format t " 10 - Show robot location~%")
  (format t " 11 - show-locations~%")
  (format t " 12 - show-robots~%")
  (format t " 13 - set last-location~%")
  (format t " 0 - exit~%")
  (format t "Input: ~%")   
  (setf nmbr (parse-integer (read-line nil))) 
  (let ((known-locations (tcl-kb-query-all :key '(is-a) :value '((is-a location)))))    
  (cond
    ((equal nmbr 1)
        (format t "Approach location - known locations: ~%")
        (format t "~%~{~/format-locations/~^, ~}~%~%" known-locations)
        (format t "Enter location name: ~%")
        (setf locations-var (string-upcase (read-line nil)))
        (setf locations-var (read-from-string locations-var))
        (format t "your choice: ~a ~%" locations-var)
        (execute `( ,(add-id-robot 'navigation.approachLocation) ,locations-var)))
    ((equal nmbr 2)
        (print_stations)
        (format t "Enter stations id: ~%")
        (setf stationId (parse-integer(string-upcase (read-line nil))))
        (setf beltId 1)
        (format t "your choice stationId: ~a  : beltId = ~a~%" stationId beltId)  
        (execute `(deliverBoxToStation ,stationid ,beltId)))
    ((equal nmbr 3)
        (print_stations)
        (format t "Enter stations id: ~%")
        (setf stationId (parse-integer(string-upcase (read-line nil))))
        (setf beltId 1)
        (format t "your choice stationId: ~a  : beltId = ~a~%" stationId beltId)  
        (execute `(collectBoxFromStation ,stationid ,beltId)))
    ((equal nmbr 4)
        (print_stations)
        (format t "Enter stations id: ~%")
        (setf stationId (parse-integer(string-upcase (read-line nil))))
        (format t "your choice stationId: ~a ~%" stationId)  
        (execute `(driveToStation ,stationid)))
    ((equal nmbr 5)
        (print_stations)
        (format t "Enter stations id: ~%")
        (setf stationId (parse-integer(string-upcase (read-line nil))))
        (setf beltId 1)
        (format t "your choice stationId: ~a  : beltId = ~a~%" stationId beltId)  
        (execute `(dockToMPSStation ,stationid ,beltId)))
    ((equal nmbr 6)
        (execute `(undockFromMPSStation)))
    ((equal nmbr 7)
        (print_stations)
        (format t "Enter stations id: ~%")
        (setf stationId (parse-integer(string-upcase (read-line nil))))
        (format t "your choice stationId: ~a ~%" stationId)  
        (execute `(unloadTo ,stationid)))
    ((equal nmbr 8)
        (print_stations)
        (format t "Enter stations id: ~%")
        (setf stationId (parse-integer(string-upcase (read-line nil))))
        (format t "your choice stationId: ~a ~%" stationId)  
        (execute `(loadFrom ,stationid)))    
    ((equal nmbr 9)
        (format t "Demo loop started~%")
        (let* ((location id-robot)
               (box-present nil)
               (other-location nil))
          (loop
            (format t "robot=~a  location=~a  box-present=~a~%" id-robot location box-present)
            (tcl-kb-update :key '(is-a name) :value `((is-a robot)(name ,id-robot)(last-reached-location ,location)))
            (if (/= location 0)
              (progn
                (if box-present
                    (execute `(unloadBoxToStation ,location 1))
                    (execute `(loadBoxFromStation ,location 1)))
                (setf box-present (not box-present))))
            (format t "wait until robot ~a is at location ~a~%" (- 3 id-robot) (mod (+ 2 location) 3))
            (loop while (not (eql (mod (+ 2 location) 3) (setf other-location (get-value (tcl-kb-query :key '(is-a name) :value `((is-a robot) (name ,(- 3 id-robot)))) 'last-reached-location))))
              do (progn 
                   (format t " other robot location ~a~% " other-location)
                   (sleep 1)))
            (setf location (mod (+ 1 location) 3))
            (if (/= location 0)
              (execute `(driveToStation ,location))
              (execute `( ,(add-id-robot 'navigation.approachLocation) ,location))))))
    ((equal nmbr 10)
        (format t "Robot location ~a~%" (tcl-kb-query :key '(is-a)  :value '((is-a robot)))))
    ((equal nmbr 11)
       (show-locations))
    ((equal nmbr 12)
;       (show-robots)
;       (show (tcl-kb-query :key '(is-a) :value '((is-a robot))))
       (dolist (x (tcl-kb-query-all :key '(is-a) :value '((is-a robot)))) (show x)))
    ((equal nmbr 13)
        (format t "Enter location: ~%")
        (setf locations-var (string-upcase (read-line nil)))
        (setf locations-var (read-from-string locations-var))
        (format t "your choice: ~a ~%" locations-var)
        (tcl-kb-update :key '(is-a name) :value `((is-a robot)(name ,id-robot)(last-reached-location ,locations-var))))
    ((equal nmbr 0)
      (format t "bye bye ~%")
      (break)
      (quit))
      ))))

(format t "robot ~a: navigation_~a.initNavigation, navigation_~a.loadNavigationMap navigation-map, localizationModInst_~a.tcb-activate-localization~%" id-robot id-robot id-robot id-robot)    
;; id-robot and add-id-robot is defined in ComponentTCLSequencer/smartTCL/load-tcl.lisp
(execute `( ,(add-id-robot 'navigation.initNavigation) ))
(execute `( ,(add-id-robot 'navigation.loadNavigationMap) "navigation-map"))
;; turn on SmartAmcl (change state to active)
;; SmartAmcl must be active to enable Webots Editor to change position of robot
(execute `( ,(add-id-robot 'localizationModInst.tcb-activate-localization) ))
(menu)
