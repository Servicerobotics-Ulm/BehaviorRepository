(defun menu()
  (execute '(tcbStartup))
  
(loop

  (format t "~%MENU~%====~%~%")
  (format t " ---------------------------------------------------- ~%")  
  (format t " Tranportation Tasks ~%")
  (format t " ---------------------------------------------------- ~%")  
  (format t " 01 - Deliver box to station ~%")
  (format t " 02 - Collect box from station ~%")
  (format t " 03 - Drive to station ~%")
  (format t " 04 - Dock to station ~%")
  (format t " 05 - Undock from station ~%")
  (format t " 06 - Unload box to station ~%")
  (format t " 07 - Load box from station ~%")
  (format t " 08 - Demo loop ~%")
  (format t " 00 - exit ~%")
  (format t "Input: ~%")   
  (setf nmbr (parse-integer (read-line nil)))
  
  (cond
    ((equal nmbr 1)
	    (format t " 00 - north west production station with conveyor belt~%")
	    (format t " 01 - south west production station with conveyor belt~%")
	    (format t " 02 - south east production station with conveyor belt~%")
	    (format t " 03 - north east passive station with roller conveyor~%")
	    (format t "Enter stations id: ~%")
	    (setf stationId (parse-integer(string-upcase (read-line nil))))
	    (setf beltId 1)
	    (format t "your choice stationId: ~a  : beltId = ~a~%" stationId beltId)  
	    (execute `(deliverBoxToStation ,stationid ,beltId))
    )
    ((equal nmbr 2)
    	(format t " 00 - north west production station with conveyor belt~%")
	    (format t " 01 - south west production station with conveyor belt~%")
	    (format t " 02 - south east production station with conveyor belt~%")
	    (format t " 03 - north east passive station with roller conveyor~%")
   	    (format t "Enter stations id: ~%")
	    (setf stationId (parse-integer(string-upcase (read-line nil))))
	    (setf beltId 1)
	    (format t "your choice stationId: ~a  : beltId = ~a~%" stationId beltId)  
	    (execute `(collectBoxFromStation ,stationid ,beltId))
    )
    ((equal nmbr 3)
    	(format t " 00 - north west production station with conveyor belt~%")
	    (format t " 01 - south west production station with conveyor belt~%")
	    (format t " 02 - south east production station with conveyor belt~%")
	    (format t " 03 - north east passive station with roller conveyor~%")
   	    (format t "Enter stations id: ~%")
	    (setf stationId (parse-integer(string-upcase (read-line nil))))
	    (format t "your choice stationId: ~a ~%" stationId)  
	    (execute `(driveToStation ,stationid))
    )
    ((equal nmbr 4)
    	(format t " 00 - north west production station with conveyor belt~%")
	    (format t " 01 - south west production station with conveyor belt~%")
	    (format t " 02 - south east production station with conveyor belt~%")
	    (format t " 03 - north east passive station with roller conveyor~%")
   	    (format t "Enter stations id: ~%")
	    (setf stationId (parse-integer(string-upcase (read-line nil))))
	    (setf beltId 1)
	    (format t "your choice stationId: ~a  : beltId = ~a~%" stationId beltId)  
	    (execute `(dockToMPSStation ,stationid ,beltId))
    )
    ((equal nmbr 5)
	    (execute `(undockFromMPSStation))
    )
    ((equal nmbr 6)
    	(format t " 00 - north west production station with conveyor belt~%")
	    (format t " 01 - south west production station with conveyor belt~%")
	    (format t " 02 - south east production station with conveyor belt~%")
	    (format t " 03 - north east passive station with roller conveyor~%")
   	    (format t "Enter stations id: ~%")
	    (setf stationId (parse-integer(string-upcase (read-line nil))))
	    (format t "your choice stationId: ~a ~%" stationId)  
	    (execute `(unloadTo ,stationid))
    )
    ((equal nmbr 7)
    	(format t " 00 - north west production station with conveyor belt~%")
	    (format t " 01 - south west production station with conveyor belt~%")
	    (format t " 02 - south east production station with conveyor belt~%")
	    (format t " 03 - north east passive station with roller conveyor~%")
   	    (format t "Enter stations id: ~%")
	    (setf stationId (parse-integer(string-upcase (read-line nil))))
	    (format t "your choice stationId: ~a ~%" stationId)  
	    (execute `(loadFrom ,stationid))
    )    
    ((equal nmbr 8)
	    (setf stationId 0)
	    (setf beltId 1)
	    (format t "Demo loop started ~%")
	    (loop
	      (format t "deliverBoxToStation ~a ~%" stationId)
     	  (execute `(deliverBoxToStation ,stationid ,beltId))
	      (setq stationid (mod (1+ stationid) 3))
	      (format t "collectBoxFromStation ~a ~%" stationId)
       	  (execute `(collectBoxFromStation ,stationid ,beltId))
	      (setq stationid (mod (1+ stationid) 3))
	    )
    )
    ((equal nmbr 0)
      (format t "bye bye ~%")
      (quit))
      )
   )
)

(menu)

(format t "INIT DONE ~%")
