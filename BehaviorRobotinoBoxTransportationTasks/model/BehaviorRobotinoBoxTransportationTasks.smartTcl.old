;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; SCENARIO TASKS

;;(load (format nil memory.lisp))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; SCENARIO MEMORY
 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Robot
(tcl-kb-update 
  :key '(is-a name) 
  :value `(
            (is-a robot)
            (name 1)
            (velocity-travelling ((0 500)(-60 60)))
            (velocity-path-navigation ((0 1000)(-60 60)))
            (velocity-following  ((0 1200)(-200 200)))
            (current-room intralogistik_area)
            (current-symbolic-position nil)
            (goalid 0)
            (default-nav-map "navigation-map")
            (default-map "localization-map")))

(tcl-kb-update 
  :key '(is-a name) 
  :value '(
            (is-a room)
            (name intralogistik_area)
            (speech "intralogistik_area")        
            (size (20000 20000))
            (offset (-10000 -10000))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; LOCATIONS
(tcl-kb-update 
  :key '(is-a name) 
  :value '( 
            (is-a location)
            (name home)
            (speech "home location")
            (approach-type (region))
            (approach-region-pose (0 0 0))
            (approach-region-dist 150)
            (approach-exact-pose (0 0 0))
            (approach-exact-dist 50)
            (approach-exact-safetycl 0)
            (orientation-region (position 1000 0))
            (orientation-exact (position 1000 0))
            (backward-dist 500)))

;; approach location to station 0
(tcl-kb-update 
  :key '(is-a name) 
  :value '( 
            (is-a location)
            (name zero)
            (speech "station zero")
            (approach-type (region))
            (approach-region-pose (1510 1260 0))
            (approach-region-dist 150)
            (approach-exact-pose (1510 1260 0))
            (approach-exact-dist 100)
            (approach-exact-safetycl 0)
            (orientation-region (position 1760 1850))
            (orientation-exact (position 1760  1850))
            (backward-dist 500)))

;; approach location to station 1
(tcl-kb-update 
  :key '(is-a name) 
  :value '( 
            (is-a location)
            (name one)
            (speech "station one")
            (approach-type (region))
            (approach-region-pose (-1290 1320 0))
            (approach-region-dist 150)
            (approach-exact-pose (-1290 1320 0))
            (approach-exact-dist 100)
            (approach-exact-safetycl 0)
            (orientation-region (position -1760 1950))
            (orientation-exact (position -1760 1950))
            (backward-dist 500)))


;; approach location to station 2
(tcl-kb-update 
  :key '(is-a name) 
  :value '( 
            (is-a location)
            (name two)
            (speech "station two")
            (approach-type (region))
            (approach-region-pose (-1480 -1210 0))
            (approach-region-dist 150)
            (approach-exact-pose (-1480 -1210 0))
            (approach-exact-dist 100)
            (approach-exact-safetycl 0)
            (orientation-region (position -1820 -1990))
            (orientation-exact (position -1820 -1990))
            (backward-dist 500)))


;; approach location to station 3
(tcl-kb-update 
  :key '(is-a name) 
  :value '( 
            (is-a location)
            (name three)
            (speech "station three")
            (approach-type (region))
            (approach-region-pose (1280 -1136 0))
            (approach-region-dist 150)
            (approach-exact-pose (1280 -1136))
            (approach-exact-dist 100)
            (approach-exact-safetycl 0)
            (orientation-region (position 1750 -1980))
            (orientation-exact (position 1750 -1980))
            (backward-dist 500)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; STATIONS
(tcl-kb-update 
  :key '(is-a id) 
  :value '(
            (is-a station)
            (id MPS-OPCUA-Zero)
            (locations zero)
            (approach-location zero)
            (docking-type LASER-IR)
            (type mps)
            ))

(tcl-kb-update 
  :key '(is-a id) 
  :value '(
            (is-a station)
            (id MPS-OPCUA-One)            
            (approach-location one)
            (docking-type LASER-IR)            
            (type mps)))

(tcl-kb-update 
  :key '(is-a id) 
  :value '(
            (is-a station)
            (id MPS-OPCUA-Two)            
            (approach-location two)
            (docking-type LASER-IR)            
            (type mps)))

(tcl-kb-update 
  :key '(is-a id) 
  :value '(
            (is-a station)
            (id MPS-OPCUA-Three)
            (approach-location three)            
            (docking-type LASER-IR)
            (type MANUAL)))

;; Station types
(tcl-kb-update 
  :key '(is-a name) 
  :value '(
            (is-a station-type)
            (name OPCUA_STATION)
            (approach-location three)            
            (docking-type LASER-IR)
            (type MANUAL)))


(defun show-locations ()
  (let ((obj-list     (tcl-kb-query-all :key '(is-a) :value '((is-a location)))))
    (dolist (obj obj-list)
      (format t "~%--------------------------------~%")
      (format t "L O C A T I O N ------------------~%")
      (format t "name                       : ~s ~%" (get-value obj 'name))
      (format t "  type                     : ~s ~%" (get-value obj 'type))
      (format t "  approach-type            : ~s ~%" (get-value obj 'approach-type))
      (format t "  approach-region-pose     : ~s ~%" (get-value obj 'approach-region-pose))
      (format t "  approach-region-dist     : ~s ~%" (get-value obj 'approach-region-dist))
      (format t "  approach-exact-pose      : ~s ~%" (get-value obj 'approach-exact-pose))
      (format t "  approach-exact-dist      : ~s ~%" (get-value obj 'approach-exact-dist))
      (format t "  approach-exact-safetycl  : ~s ~%" (get-value obj 'approach-exact-safetycl))
      (format t "  orientation-region       : ~s ~%" (get-value obj 'orientation-region))
      (format t "  orientation-exact        : ~s ~%" (get-value obj 'orientation-exact))
      (format t "  orientation              : ~s ~%" (get-value obj 'orientation))
      (format t "  station-distance         : ~s ~%" (get-value obj 'station-distance))
      (format t "  belt-count               : ~s ~%" (get-value obj 'belt-count)))))

(defun show-stations ()
  (let ((obj-list     (tcl-kb-query-all :key '(is-a) :value '((is-a station)))))
    (dolist (obj obj-list)
      (format t "~%--------------------------------~%")
      (format t "S T A T I O N --------------------~%")
      (format t "id                         : ~s ~%" (get-value obj 'id))
      (format t "  pose                     : ~s ~%" (get-value obj 'pose))
      (format t "  approach-pose            : ~s ~%" (get-value obj 'approach-pose))
      (format t "  approach-location        : ~s ~%" (get-value obj 'approach-location))
      (format t "  type                     : ~s ~%" (get-value obj 'type)))))

(defun show-station-types ()
  (let ((obj-list     (tcl-kb-query-all :key '(is-a) :value '((is-a station-type)))))
    (dolist (obj obj-list)
      (format t "~%--------------------------------~%")
      (format t "S T A T I O N - T Y P E S --------------------~%")
      (format t "name                         : ~s ~%" (get-value obj 'name))
      (format t "  min-station-width          : ~s ~%" (get-value obj 'min-station-width))
      (format t "  max-station-width          : ~s ~%" (get-value obj 'max-station-width))
      (format t "  offs-bet-center-o-belts    : ~s ~%" (get-value obj 'offset-between-center-of-belts))
      (format t "  offs-left-ref-to-1Belt-cent: ~s ~%" (get-value obj 'offset-left-reflector-to-1stBelt-center))
      (format t "  ir-dock-stop-dist-l2-min   : ~s ~%" (get-value obj 'ir-dock-stop-dist-l2-min))
      (format t "  ir-dock-stop-dist-l2-max   : ~s ~%" (get-value obj 'ir-dock-stop-dist-l2-max))
      (format t "  ir-dock-stop-dist-l1       : ~s ~%" (get-value obj 'ir-dock-stop-dist-l1))
      (format t "  ir-dock-center-sensor-zero : ~s ~%" (get-value obj 'ir-dock-center-sensor-zero))
      (format t "  docking-type               : ~s~%"  (get-value obj 'docking-type))
      (format t "  commincation-type          : ~s~%"  (get-value obj 'commincation-type))
      (format t "  number-of-belts            : ~s~%"  (get-value obj 'number-of-belts))
      (format t "  max-reflector-dist         : ~s~%"  (get-value obj 'max-reflector-dist))
      (format t "  laser-dock-stop-dist       : ~s~%"  (get-value obj 'laser-dock-stop-dist))
      (format t "  description                : ~s ~%" (get-value obj 'description)))))


(defun show-robots ()
  (let ((robot-list (tcl-kb-query-all :key '(is-a) :value '((is-a robot)))))
    (dolist (robot robot-list)
    (format t "~%--------------------------------~%")
    (format t "R O B O T ------------------------~%")
    (format t "  name                   : ~s ~%" (get-value robot 'name))
    (format t "  velocity-travelling    : ~s ~%" (get-value robot 'velocity-travelling))
    (format t "  current-room           : ~s ~%" (get-value robot 'current-room))
    (format t "  curr-s-loc             : ~s ~%" (get-value robot 'current-symbolic-position)))))


;;---------------------------------------------------------------------------
;; driveToStation
;; input<string> station id
;; find approach location id of the station and drives robot to that location
;;---------------------------------------------------------------------------
(realize-tcb (driveToStation ?stationId)
  (action 
    (
      (format t "===== driveToStation ~s~%" ?stationId)            
       (let* ((station (tcl-kb-query :key '(is-a id) :value `((is-a station)(id ?stationid))))	          
	            (station-approach-location (get-value station approach-location)))
              (format t "=========================>>> tcb-approach-station: ~a : station-approach-location: ~a ~%" ?stationid station-approach-location)            
              (tcl-push-plan :plan `(   
                                  (localizationModInst.tcb-activate-localization)                              
                                  (navigation.approachLocation ,station-approach-location)                                                                    
                                  (localizationModInst.tcb-deactivate-localization)
                                  )))
  ))
)

;;--------------------------------------------------------------------------------------------------------------
;; deliverBoxToStation
;; input<string> station id
;; find drives robot to location ff the station, docks to it and delivers the box through converyer belt
;;---------------------------------------------------------------------------------------------------------------
(realize-tcb (deliverBoxToStation ?stationId ?beltId)
  (action (	
            ;(format t "===== deliverBoxTostation ~s ~%"  '?stationId)
            (format t "===== deliverBoxTostation ~s : beltId = ~s~%" '?stationId '?beltId)
            (tcl-push-plan :plan `(   
                                 (driveToStation ?stationId)                             
                                  (MPS.tcb-mps-station-dock '?stationId '?beltId)                                                                                                          
                                  )
            )
  ))
)

(realize-tcb (timotest ?a ?b)
  (action (	
            (format t "===== timo a ~s ~%"  '?a)
            ;(format t "===== timo ~s : beltId = ~s~%" stationId beltId)
            ;(tcl-push-plan :plan `(   
            ;                     (driveToStation ?stationId)                             
            ;                      (MPS.tcb-mps-station-dock ?stationId ?beltId)                                                                                                          
                                  ;)
                                  ))
            
)

(realize-tcb (timotestnew)
  (action (	
            (format t "===== timotestnew ~%")
  ))

)


;;--------------------------------------------------------------------------------------------------------------
;; collectBoxfromStation
;; input<string> station id
;; find drives robot to location ff the station, docks to it and delivers the box through converyer belt
;;---------------------------------------------------------------------------------------------------------------

(realize-tcb (collectBoxfromStation  ?stationId ?beltId)
  (action (            
            (format t "===== collectBoxfromStation ~s : beltId = ~s~%" stationId beldId)          
            ))
;  (plan (          
;          (localizationModInst.tcb-activate-localization)
;          (navigation.approachLocation,?locationName)
;          (localizationModInst.tcb-deactivate-localization)          
;          ))
)





(define-tcb (tcb-fetch-from-mps-station ?stationid ?beltid)
  ;(rules (rule-mps-approach-failed-fetch rule-mps-load-failed rule-mps-manual-load-failed rule-mps-docking-failed rule-mps-undocking-failed rule-abort-job-error-ack))
  (action (
           (let* ((station (tcl-kb-query :key '(is-a id) :value `((is-a station)(id ?stationid))))
	          (station-type (get-value station 'type))
	          (station-approach-location (get-value station 'approach-location)))
            (format t "=========================>>> tcb-fetch-from-mps-station station-id: ~a belt: ~a station-type: ~a station-approach-location: ~a ~%" '?stationid '?beltid station-type station-approach-location)
            (cond
              ((equal station-type 'MANUAL-STATION)
                (tcl-push-plan :plan `(                                  
                                  (navigation.approachLocation ,station-approach-location)
                                  (tcb-update-running-job-state 'DRIVING-DONE)
                                  (MPS.tcb-manual-load)
                                  )))
              (T
                (tcl-push-plan :plan `(                                  
                                  (navigation.approachLocation ,station-approach-location)                                  
                                  (MPS.tcb-mps-station-dock ?stationid ?beltid)
                                  (MPS.tcb-mps-station-load ?stationid)
                                  (MPS.tcb-mps-station-undock)
                                  ))))
             ))))

(define-rule (rule-mps-approach-failed-fetch)
  (tcb (tcb-approach-location ?location))
  (return-value (ERROR (UNKNOWN LOCATION)))
  (action (
              (format t "=========================>>> RULE: rule-mps-approach-failed-fetch (ERROR (UNKNOWN LOCATION))  ~%")
              (tcl-delete-plan)
              '(ERROR (FETCH MPS)))))

